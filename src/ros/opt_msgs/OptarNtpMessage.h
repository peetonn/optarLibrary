// Generated by gencpp from file opt_msgs/OptarNtpMessage.msg
// DO NOT EDIT!


#ifndef OPT_MSGS_MESSAGE_OPTARNTPMESSAGE_H
#define OPT_MSGS_MESSAGE_OPTARNTPMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace opt_msgs
{
template <class ContainerAllocator>
struct OptarNtpMessage_
{
  typedef OptarNtpMessage_<ContainerAllocator> Type;

  OptarNtpMessage_()
    : header()
    , type(0)
    , id()
    , serverTime()
    , clientRequestTime()  {
    }
  OptarNtpMessage_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , id(_alloc)
    , serverTime()
    , clientRequestTime()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef ros::Time _serverTime_type;
  _serverTime_type serverTime;

   typedef ros::Time _clientRequestTime_type;
  _clientRequestTime_type clientRequestTime;



  enum {
    QUERY = 0,
    REPLY = 1,
  };


  typedef boost::shared_ptr< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> const> ConstPtr;

}; // struct OptarNtpMessage_

typedef ::opt_msgs::OptarNtpMessage_<std::allocator<void> > OptarNtpMessage;

typedef boost::shared_ptr< ::opt_msgs::OptarNtpMessage > OptarNtpMessagePtr;
typedef boost::shared_ptr< ::opt_msgs::OptarNtpMessage const> OptarNtpMessageConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opt_msgs::OptarNtpMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opt_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'opt_msgs': ['/root/workspace/ros/src/open_ptrack/opt_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7792f98104f7061395271a90630dc1ba";
  }

  static const char* value(const ::opt_msgs::OptarNtpMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7792f98104f70613ULL;
  static const uint64_t static_value2 = 0x95271a90630dc1baULL;
};

template<class ContainerAllocator>
struct DataType< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opt_msgs/OptarNtpMessage";
  }

  static const char* value(const ::opt_msgs::OptarNtpMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is used to exchange time information between a ros node and \n"
"# an android device that uses optar.\n"
"\n"
"Header header\n"
"\n"
"# The type of message. Either a request for the time or a reply to it\n"
"int32 type\n"
"int32 QUERY=0\n"
"int32 REPLY=1\n"
"\n"
"# This id is needed to match a reply to its query. The server will use the query's id\n"
"# as the id for the reply. It should be unique among all the messages exchanged in the\n"
"# current ROS network. It's the client's responsibility to choose it.\n"
"string id\n"
"\n"
"# The time on the server side. This will be filled up by the server when generating a reply\n"
"time serverTime\n"
"\n"
"# The time on the client side at the time of the request\n"
"time clientRequestTime\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::opt_msgs::OptarNtpMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.id);
      stream.next(m.serverTime);
      stream.next(m.clientRequestTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptarNtpMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opt_msgs::OptarNtpMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opt_msgs::OptarNtpMessage_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "serverTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.serverTime);
    s << indent << "clientRequestTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.clientRequestTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPT_MSGS_MESSAGE_OPTARNTPMESSAGE_H
